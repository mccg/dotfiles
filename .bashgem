#!/bin/bash
# .bashrc

tmux-dump-sessions () {
  local d='|'
  local tmux_sessions_dump=~/.tmux.sessions.dump
  tmux list-windows -a -F "#S${d}#W${d}#{pane_current_path}" > $tmux_sessions_dump
  echo "[ Dumped `cat $tmux_sessions_dump | wc -l` windows. ]"
  cat $tmux_sessions_dump
}
terminal_size() { stty size 2>/dev/null | awk '{ printf "-x%d -y%d", $2, $1 }'; }
session_exists() { tmux has-session -t "$1" 2>/dev/null; }
add_window() { tmux new-window -d -t "$1:" -n "$2" -c "$3"; }
new_session() { cd "$3" && tmux new-session -d -s "$1" -n "$2" $4; }
tmux-restore-sessions () {
  test `tls | wc -l` -gt 1 && return 0
  tmux -u start-server; local count=0; local dimensions="$(terminal_size)"
  while IFS='|' read session_name window_name dir; do
    if [[ -d "$dir" && $window_name != "log" && $window_name != "man" ]]; then
      if session_exists "$session_name"; then
        add_window "$session_name" "$window_name" "$dir"
      else
        new_session "$session_name" "$window_name" "$dir" "$dimensions"
        count=$(( count + 1 ))
      fi
    fi
  done < ~/.tmux.sessions.dump
  echo "Restored $count sessions."
}

watchd () {
  command -v md5sum >/dev/null 2>&1 || { echo "Command 'md5sum' required but not installed."; return -1; }
  local WATCHD_N=0.8; local WATCHD_F
  while [ -n $1 ]; do
    case $1 in
      usage) echo "watchd [-n <second>] -f <file> -- <command>"; return 0;;
      -n)    WATCHD_N=$2; shift 2;;
      -f)    WATCHD_F=$2; shift 2;;
      --)    shift 1; break;;
      *)     watchd usage; return 0;;
    esac
  done
  [ -z ${WATCHD_N} ] && { echo "Interval time must be set. Set -n <second>"; return -2; }
  [ -z ${WATCHD_F} ] && { echo "A file must be watched. Set -f <FILE>]"; return -3; }
  let watchd_executed_times=0
  local watchd_md5sum=
 (
  trap 'rm -f ${temp_file};echo -e "\nExit watchd."' EXIT
  while true; do
    local watching_md5sum=`md5sum ${WATCHD_F} | cut -f1 -d' '`
    if [[ x$watching_md5sum != x$watchd_md5sum ]];then
      local temp_file=$(mktemp)
      let watchd_executed_times=watchd_executed_times+1
      watchd_md5sum=$watching_md5sum
      echo "[watchd] : "`date "+%F %T %Z %z"`". Watching file: ${WATCHD_F}" >>$temp_file
      echo "[watchd] : Command : "$*                                        >>$temp_file
      eval $*                                                               >>$temp_file 2>&1
      echo ""                                                               >>$temp_file
      echo "[watchd] : ${watchd_executed_times} times executed."            >>$temp_file
      clear
      cat $temp_file
      rm -f $temp_file
    fi
    sleep $WATCHD_N
  done
 )
}

watch2 () {
  local WATCH2_N=2;
  while [ -n $1 ]; do
    case $1 in
      usage) echo "watch2 -n <second> -- <command>"; return 0;;
      -n)    WATCH2_N=$2; shift 2;;
      --)    shift 1; break;;
      *)     watch2 usage; return 0;;
    esac
  done
  let watch2_executed_times=0
 (
  trap 'rm -f ${temp_file};echo -e "\nExit watch2."' EXIT
  while true;
  do
    local temp_file=$(mktemp)
    let watch2_executed_times=watch2_executed_times+1
    echo "[watch2] : "`date "+%F %T %Z %z"`". Time interval: ${WATCH2_N}s" >>$temp_file
    echo "[watch2] : Command : ""$*"                                       >>$temp_file
    eval ${*}                                                              >>$temp_file 2>&1
    echo ""                                                                >>$temp_file
    echo "[watch2] : ${watch2_executed_times} times executed."             >>$temp_file
    clear
    cat $temp_file
    rm -f $temp_file
    sleep $WATCH2_N
  done
 )
}

vs () { vim ${1/\:/ +}; }
lsp () { for f in "$@";do find "`pwd`" -name "$f"; done; }
mkcd () { mkdir -p $1 && cd $1; }
dud () { sudo du -h -d$1; }

tarx() {
  if [ -f $1 ] ; then
    case $1 in
    *.tar.bz2)   tar -xvjf $1    ;;
    *.tar.gz)    tar -xvzf $1    ;;
    *.tar.xz)    tar -xvJf $1    ;;
    *.bz2)       bunzip2 $1      ;;
    *.rar)       rar x $1        ;;
    *.gz)        gunzip $1       ;;
    *.tar)       tar -xvf $1     ;;
    *.tbz2)      tar -xvjf $1    ;;
    *.tgz)       tar -xvzf $1    ;;
    *.zip)       unzip $1        ;;
    *.Z)         uncompress $1   ;;
    *.7z)        7z x $1         ;;
    *)           echo "don't know how to extract '$1'..." ;;
    esac
  else
    echo "'$1' is not a valid file!"
  fi
}

tarc() {
  if [ -n "$1" ] ; then
    FILE=$1
    case $FILE in
    *.tar) shift && tar -cf $FILE $*      ;;
    *.tar.bz2) shift && tar -cjf $FILE $* ;;
    *.tar.xz) shift && tar -cJf $FILE $*  ;;
    *.tar.gz) shift && tar -czf $FILE $*  ;;
    *.tgz) shift && tar -czf $FILE $*     ;;
    *.zip) shift && zip $FILE $*          ;;
    *.rar) shift && rar $FILE $*          ;;
    esac
  else
      echo "usage: tarc <foo.tar.gz> ./foo ./bar"
  fi
}

parse_git_branch () { git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'; }

senv () { export `cat $1`; }

# BSD
export LSCOLORS=ExfxcxdxbxegexBxFxHxHx
# Linux
export LS_COLORS='di=1;34:ln=35:so=32:pi=33:ex=31:bd=34;46:cd=34:su=1;31:sg=1;35:tw=1;37:ow=1;37'

export PS1="[\u@\h \w]\033[32m\]\$(parse_git_branch 2>/dev/null)\033[0m\]\n$ "
export TERM=xterm-256color
export SVN_EDITOR=vi

alias vi='vim'
alias view='vim -R'
alias l='ls -lha'
alias la='ls -a'
alias lh='ls -lh'
alias ll='ls -lh'
alias lla='ls -lha'
alias tat='tmux -u at -t'
alias tls='tmux -u ls'
alias tns='tmux -u new -s'
alias dirs='dirs -v'
alias pd='pushd'
alias cd.='cd ..'
alias cd..='cd ../..'
alias cd...='cd ../../..'
alias his='history'

alias vimrc='vim ~/.vimrc'
alias vibashrc='vim ~/.bashrc'
alias vibashprofile='vim ~/.bash_profile'
alias vibashgem='vim ~/.bashgem'
alias vigitconfig='vim ~/.gitconfig'
alias sbashrc='source ~/.bashrc'
alias stmux='tmux source-file ~/.tmux.conf'

alias gti='git'
alias ci='vim'

alias pingbaidu="ping www.baidu.com"
alias sag='/usr/bin/ssh-agent bash'
alias sad='/usr/bin/ssh-add'
alias rav='rsync -av'

alias gitignore='vim .gitignore'
alias gitattrbutes='vim .gitattributes'
alias gitconfig='vim .git/config'
alias gitmodules='vim .gitmodules'
